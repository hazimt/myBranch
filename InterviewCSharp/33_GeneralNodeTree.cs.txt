//https://stackoverflow.com/questions/40675162/install-a-nuget-package-in-visual-studio-code
//Nuget

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace TestCases
{
    public class testCase33
    {
        bool debug = false;        
        public int somefn()
        {

            return 1;
        }
    }


    //Copy the jason file in 32_OrgChart.json to https://json2csharp.com/json-to-csharp 
    //It will generate the below class 
    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse); 
    public class Node    {
        public string Employee { get; set; } 
        public string Manager { get; set; } 
    }

    public class Root
    {
        public string comment1 { get => comment1; set => comment1 = value; } 
        public string comment2 { get => comment2; set => comment2 = value; } 
        public int nodesize { get => nodesize; set => nodesize = value; }
        public List<Node> node { get => node; set => node = value; } 
    }

    public class RootCollection
    {
        public List<Root> roots
        {
            get => roots;
            set => roots = value; 
        }
    }
    


    //https://www.c-sharpcorner.com/UploadFile/858292/parsing-a-json-file-with-C-Sharp/
    // public class ReadJsonController: Controller  
    // {  
    //     // GET: ReadJson  
    //     public ActionResult Index()
    //     {  
    //         //get the Json filepath  
    //         string file = Server.MapPath("~/App_Data/output.json");  
    //         //deserialize JSON from file  
    //         string Json = System.IO.File.ReadAllText(file);  
    //         JavaScriptSerializer ser = new JavaScriptSerializer();  
    //         var personlist = ser.Deserialize < List < Person >> (Json);  
    //         return View(personlist);  
    //     }  
    //}  

    public class generalNodeTreeJ
    {
        public object JasonDeserialize(Type dataType, string jasonFilePath)
        {
            JObject obj = null;

            JsonSerializer jsonSerializer = new JsonSerializer();
            
            if (File.Exists(jasonFilePath))
            {
                StreamReader sr = new StreamReader(jasonFilePath);
                JsonReader jsonReader = new JsonTextReader(sr);
                obj = jsonSerializer.Deserialize(jsonReader) as JObject;
                jsonReader.Close();
                sr.Close();
            }
            
            return obj.ToObject(dataType);
        }
        
        //Driver Function like main
        public void driverCall()
        {
            Console.WriteLine(" 32_GeneralNodeTree.cs  ");

            //testCase32 sn = new testCase32();

            //sn.somefn();

            //var model = JsonConvert.DeserializeObject<List<MatrixModel.RootObject>>(json);
            DataSerializer dataSerializer = new DataSerializer();
            Node n = null;
            //p = dataSerializer(typeof())

            Console.ReadLine();             
        }



        [HttpPost]
        public ActionResult Index(FormCollection collection)
        {
            var data = new RootCollection();
            data.Str = (string)collection.GetValue("Str").ConvertTo(typeof(string));
            var personsString = (string)collection.GetValue("Persons").ConvertTo(typeof(string));
            using (var textReader = new StringReader(personsString))
            {
                using (var reader = new JsonTextReader(textReader))
                {
                    data.Persons = new JsonSerializer().Deserialize(reader, typeof(List<Person>)) as List<Person>; 
                }
            }

            return View(data);
        }



    }

}

